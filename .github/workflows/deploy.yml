name: Fifareward Webapp CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main 

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for PostgreSQL to be ready
      run: |
        while ! pg_isready -h localhost -p 5432 -U postgres; do
          sleep 1
        done

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest -f Dockerfile .
        docker push ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout current branch ✅
        uses: actions/checkout@v3

      - name: Set up SSH key and whitelist EC2 IP address 🐻‍❄️
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Verify SSH key
        run: ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"

      - name: Copy files to remote server 🚙
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USER }}
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p /home/${{ secrets.EC2_USER }}/flaskapp"
          scp -i ~/.ssh/id_rsa -r * ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/flaskapp

      - name: Run Bash Script To Deploy App 🚀
        env:
          ENV: ${{ secrets.ENV }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_SECRET_KEY: ${{ secrets.CLOUDINARY_SECRET_KEY }}
          CLOUD_NAME: ${{ secrets.CLOUD_NAME }}
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "chmod +x /home/${{ secrets.EC2_USER }}/flaskapp/deploy.sh && /home/${{ secrets.EC2_USER }}/flaskapp/deploy.sh $ENV $POSTGRES_USER $POSTGRES_PASSWORD $POSTGRES_DB $DATABASE_URL $BOT_TOKEN $CLOUDINARY_API_KEY $CLOUDINARY_SECRET_KEY $CLOUD_NAME"

      - name: Clean up SSH key 🚀
        if: always()
        run: rm -f ~/.ssh/id_rsa
