name: Fifareward Webapp CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main 

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres01
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for PostgreSQL to be ready
      run: |
        while ! pg_isready -h localhost -p 5432 -U postgres; do
          sleep 1
        done

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest -f Dockerfile .
        docker push ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH key and whitelist EC2 IP address 🐻‍❄️
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Create directory on EC2 instance if not exists 🚀
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          if [ ! -d /home/${{ secrets.EC2_USER }}/flaskapp ]; then
            mkdir -p /home/${{ secrets.EC2_USER }}/flaskapp
          fi
        EOF

    - name: Create .gitignore to exclude venv and other unnecessary files 🧨
      run: |
        echo "venv/" > .gitignore
        echo ".git/" >> .gitignore
        echo "node_modules/" >> .gitignore
        echo ".github/" >> .gitignore
        echo "Dockerfile" >> .gitignore
        echo "deploy.sh" >> .gitignore

    - name: Copy application files to EC2 instance 🚙
      run: |
        rsync -av --exclude-from='.gitignore' . ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/flaskapp

    - name: Run deployment script on EC2 🚀
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          # Update package list and install Docker if not already installed
          sudo yum update -y
          sudo yum install -y docker
          sudo service docker start

          # Navigate to the application directory
          cd /home/${{ secrets.EC2_USER }}/flaskapp

          # Pull, stop, remove, and run Docker container
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest
          sudo docker stop flaskapp || true
          sudo docker rm flaskapp || true
          sudo docker run -d -p 80:80 --name flaskapp --env DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_USER }} ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest
        EOF

    - name: Clean up SSH key 🚀
      if: always()
      run: rm -f ~/.ssh/id_rsa
