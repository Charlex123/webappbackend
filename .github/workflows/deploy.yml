name: Fifareward Webapp CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main 

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres01
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for PostgreSQL to be ready
      run: |
        while ! pg_isready -h db -p 5432 -U postgres; do
          sleep 1
        done

    - name: Set up database
      run: |
        export PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }}
        psql -h db -U postgres -d postgres -c "CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY, name TEXT NOT NULL);"

    - name: Test
      run: |
        export DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}
        pytest

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest -f Dockerfile .
        docker push ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest
          docker stop flaskapp || true
          docker rm flaskapp || true
          docker run -d -p 80:80 --name flaskapp --env DATABASE_URL=postgresql://postgres:postgres01@db:5432/postgres ${{ secrets.DOCKER_USERNAME }}/flaskapp:latest
